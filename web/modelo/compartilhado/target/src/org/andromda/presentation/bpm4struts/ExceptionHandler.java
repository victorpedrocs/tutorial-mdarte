 //
// Attention: Generated code! Do not modify by hand!
// Generated by: StrutsPatternMatchingExceptionHandler.vsl in andromda-bpm4struts-cartridge.
//

package org.andromda.presentation.bpm4struts;

import java.security.PrivilegedActionException;

import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Locale;
import java.util.Map;
import java.util.List;
import java.util.StringTokenizer;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import javax.ejb.EJBException;

import org.apache.struts.Globals;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionMessage;
import org.apache.struts.action.ActionMessages;
import org.apache.struts.config.ExceptionConfig;
import org.apache.struts.util.MessageResources;
import org.hibernate.HibernateException;
import org.hibernate.StaleStateException;
import org.hibernate.exception.ConstraintViolationException;
import org.hibernate.exception.DataException;
import org.hibernate.exception.GenericJDBCException;
import org.hibernate.exception.JDBCConnectionException;
import org.hibernate.exception.LockAcquisitionException;
import org.hibernate.exception.SQLGrammarException;

/**
 * <p/>
 *  A configurable pattern matching error handler retrieves exception mapping
 *  keys from an exception. This is used to retrieve keys from the back-end exceptions
 *  which can be mapped to exception messages keyed in an application resource
 *  file.
 * </p>
 */
public class ExceptionHandler
    extends org.apache.struts.action.ExceptionHandler
{
    /**
     * This method is overriden to provide an alternative implementation for storing the exception.
     * This method will use a pattern matching algorithm to extract a possible resource message that is used instead
     * of the argument exception's message.
     */
    public ActionForward execute(Exception exception,
                                 ExceptionConfig exceptionConfig,
                                 ActionMapping mapping,
                                 ActionForm actionForm,
                                 HttpServletRequest request,
                                 HttpServletResponse response) throws ServletException {
    	
    	MessageResources messageResources = (MessageResources)request.getAttribute(Globals.MESSAGES_KEY);
    	Locale locale = (Locale)request.getSession().getAttribute(Globals.LOCALE_KEY);
    	
    	Collection<ActionMessage> mensagens = new ArrayList<ActionMessage>();
    	
    	ActionForward forward;
  
    	ExceptionUtil exceptionUtil = new ExceptionUtil();

        try{
        	Collection<String> chaves = new ArrayList<String>();
        	Map<String, Collection<String>> parametros = new HashMap<String, Collection<String>>();
        	
        	exceptionUtil.parseExceptionMessage(request, exception, messageResources, locale, chaves, parametros);
        	
        	Iterator it = chaves.iterator();
                
        	while(it.hasNext()){
        		String chave = (String)it.next();
        		if(parametros.get(chave) == null || parametros.get(chave).size() == 0)
        			mensagens.add(new ActionMessage(chave));
        		else
        			mensagens.add(new ActionMessage(chave, parametros.get(chave).toArray()));
            }
        }catch (Throwable parseException){
        	// no pattern was found, so just continue as usual
        	ActionMessages messages = (ActionMessages)request.getSession().getAttribute(Globals.MESSAGE_KEY);
		mensagens.add(new ActionMessage(exceptionConfig.getKey(), parseException.getMessage()));
        }
            
        // Store the exception
        request.setAttribute(Globals.EXCEPTION_KEY, exception);
        request.getSession().setAttribute(Globals.EXCEPTION_KEY, exception);
        exceptionUtil.storeException(request, mensagens);
        
        //PrintStackTraceException
        exception.printStackTrace();
        
        if (exceptionConfig.getPath() != null)
        {
            forward = new ActionForward(exceptionConfig.getPath());
        }
        else
        {
            forward = new ActionForward("/ForwardAction.do?path=&modulo=");
        }
        
        return forward;
    }
}
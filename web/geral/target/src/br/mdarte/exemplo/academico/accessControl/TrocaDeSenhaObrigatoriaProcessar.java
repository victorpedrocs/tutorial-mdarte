// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by: TrocaDeSenhaObrigatoriaProcessar.java.vsl in andromda-bpm4struts-cartridge-coppetec.
//
package br.mdarte.exemplo.academico.accessControl;

import javax.security.auth.Subject;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import br.mdarte.exemplo.academico.util.Constantes;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

/**
 * 
 */
public final class TrocaDeSenhaObrigatoriaProcessar extends Login 
{
    public ActionForward particularExecute(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception
    {
    	ActionForward forward = null;
    	if(request.getSession().getAttribute(Constantes.MENU) != null)
    	{
    		forward = _trocaSenhaMenu(mapping, form, request, response);
    	}else
    	{     
    	
    		forward = _trocaSenha(mapping, form, request, response);
    	
    		try{
        	if(request.getSession().getAttribute(Constantes.FORWARD) != null){
	        	request.getSession().setAttribute("form", form);
        	}else{
        		request.getSession().setAttribute("form", request.getSession().getAttribute("form"));
        	}
	    }catch(Exception e ){
	            Object formObj = org.andromda.presentation.bpm4struts.PageSessionObjectUtil.getPageForm(request, "${action.useCase.name}");

	            if (formObj != null) {
	            	try
	            	{
	            		formObj.getClass().getMethod("resetCheckBoxes", new Class[] {org.apache.struts.action.ActionMapping.class, javax.servlet.http.HttpServletRequest.class}).invoke(formObj, new Object[]{null, null});
	            	}
	            	catch (Exception e2)
	            	{
	            		// ignoring
	            	}

	            	final java.util.Map parameters = new java.util.HashMap();
	            	for (final java.util.Enumeration names = request.getParameterNames(); names.hasMoreElements();)
	            	{
	            		final String name = String.valueOf(names.nextElement());
	            		parameters.put(name, request.getParameterValues(name));
	            	}
	            	try
	            	{
	            		org.apache.commons.beanutils.BeanUtils.populate(formObj, parameters);
	            	}
	            	catch (java.lang.Exception populateException)
	            	{
	            		// ignore if we have an exception here (we just don't populate).
	            	}
	            }
	            throw e;
    	}   
    	} 	
        return forward;
    }


    /**
     * 
     */
    private ActionForward _trocaSenha(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception
    {
        ActionForward forward = null;
        forward = __trocaEfetuadaComSucesso(mapping, form, request, response);
        return forward;
    }

    private ActionForward _trocaSenhaMenu(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception
    {
	ActionForward forward = mapping.findForward("troca.de.senha.obrigatoria");	
    LoginFormImpl formImpl = (LoginFormImpl)form;
    Subject subject = (Subject)request.getSession().getAttribute(Constantes.USER_SESSION);
    String usuario = ControleAcessoImpl.getCallerPrincipal(subject).getName();
    formImpl.setUsuario(usuario);         	       		
	request.getSession().removeAttribute(Constantes.MENU);
		return forward;
    }    
      
    /**
     * 
     */
    private ActionForward __trocaEfetuadaComSucesso(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception
    {
    	String value = String.valueOf(LoginControllerFactory.getLoginControllerInstance().trocaEfetuadaComSucesso(mapping, (TrocaDeSenhaObrigatoriaProcessarFormImpl)form, request, response, servlet));
    	
        if (value.equals("true"))
        {
            return mapping.findForward("main");
        }
        if (value.equals("false"))
        {
            return mapping.findForward("troca.de.senha.obrigatoria");
        }

        // we take the last action in case we have an invalid return value from the controller
        return mapping.findForward("troca.de.senha.obrigatoria");
    }


    /**
     * Returns true if <strong>NO</strong> errors
     * are present in the request.  This includes default validation
     * errors produced by the struts framework and the exception
     * handler errors caught by the pattern matching
     * exception handler.
     *
     * @return true if errors are <strong>not</strong> present, false otherwise.
     */
    private boolean errorsNotPresent(HttpServletRequest request)
    {
        return this.getExceptionHandlerErrors(request).isEmpty() &&
            (this.getErrors(request) == null || this.getErrors(request).isEmpty());
    }

    /**
     * <p>
     *  Retrieves the exception handler messages (if any).  Creates a new
     *  ActionMessages instance and returns that if one doesn't already exist.
     * </p>
     */
    private org.apache.struts.action.ActionMessages getExceptionHandlerErrors(HttpServletRequest request)
    {
        org.apache.struts.action.ActionMessages errors =
            (org.apache.struts.action.ActionMessages)request.getAttribute(
                "org.andromda.bpm4struts.errormessages");
        if (errors == null)
        {
            errors = new org.apache.struts.action.ActionMessages();
            request.setAttribute("org.andromda.bpm4struts.errormessages", errors);
        }
        return errors;
    }

    public void loadUseCaseInfo()
    {
        // empty
    }
}

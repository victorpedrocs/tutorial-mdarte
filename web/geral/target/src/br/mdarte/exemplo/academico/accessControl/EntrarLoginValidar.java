// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by: EntrarLoginValidar.java.vsl in andromda-bpm4struts-cartridge-coppetec.
//
package br.mdarte.exemplo.academico.accessControl;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.apache.struts.Globals;
import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

/**
 * 
 */
public final class EntrarLoginValidar extends Action
{
    public ActionForward execute(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception
    {
    
  
     final ActionForward  forward = _verificarLogin(mapping, form, request, response);
        try
        {
            request.getSession().setAttribute("form", form);
        }
        catch (java.lang.Exception exception)
        {
            Object formObj = org.andromda.presentation.bpm4struts.PageSessionObjectUtil.getPageForm(request, "${action.useCase.name}");

            if (formObj != null) {
            	try
            	{
            		formObj.getClass().getMethod("resetCheckBoxes", new Class[] {org.apache.struts.action.ActionMapping.class, javax.servlet.http.HttpServletRequest.class}).invoke(formObj, new Object[]{null, null});
            	}
            	catch (Exception e2)
            	{
            		// ignoring
            	}

            	final java.util.Map parameters = new java.util.HashMap();
            	for (final java.util.Enumeration names = request.getParameterNames(); names.hasMoreElements();)
            	{
            		final String name = String.valueOf(names.nextElement());
            		parameters.put(name, request.getParameterValues(name));
            	}
            	try
            	{
            		org.apache.commons.beanutils.BeanUtils.populate(formObj, parameters);
            	}
            	catch (java.lang.Exception populateException)
            	{
            		// ignore if we have an exception here (we just don't populate).
            	}
            }
            throw exception;
        }
        
        request.getSession().setAttribute("form", form);
        return forward;
    }

    /**
     * 
     */
    private ActionForward _verificarLogin(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception
    {
        ActionForward forward = null;
        forward = __verificarLogin(mapping, form, request, response);
        return forward;
    }
    
    /**
     * 
     */
    private ActionForward _verificaTrocaDeSenha(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception
    {
        ActionForward forward = null;
        forward = __precisaTrocarSenha(mapping, form, request, response);
        return forward;
    }

    /**
     * 
     */
    private ActionForward __precisaTrocarSenha(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception
    {
        final String value = String.valueOf(LoginControllerFactory.getLoginControllerInstance().precisaTrocarSenha(mapping, form, request, response, servlet));

        if (value.equals("false"))
        {
            if (((VerificarLoginForm) form).getNextPath() != null)
            {
                return new ActionForward("/ForwardAction.do?path="
                        + ((VerificarLoginForm) form).getNextPath());
            }
            else
                return mapping.findForward("main");
        }
        if (value.equals("true"))
        {
            return mapping.findForward("troca.de.senha.obrigatoria");
        }

        // we take the last action in case we have an invalid return value from the controller
        return mapping.findForward("troca.de.senha.obrigatoria");
    }



    /**
     * 
     */
    private ActionForward __verificarLogin(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception
    {
        final String value = String.valueOf(LoginControllerFactory.getLoginControllerInstance().verificarLogin(mapping, (EntrarLoginValidarFormImpl)form, request, response, servlet));

        if (value.equals("false"))
        {
            return mapping.findForward("entrar.login");
        }
        if (value.equals("true"))
        {
            return _verificaTrocaDeSenha(mapping, form, request, response);
        }

        // we take the last action in case we have an invalid return value from the controller
        return _verificaTrocaDeSenha(mapping, form, request, response);
    }
    /**
     * Returns true if <strong>NO</strong> errors
     * are present in the request.  This includes default validation
     * errors produced by the struts framework and the exception
     * handler errors caught by the pattern matching
     * exception handler.
     *
     * @return true if errors are <strong>not</strong> present, false otherwise.
     */
    private boolean errorsNotPresent(HttpServletRequest request)
    {
        return this.getExceptionHandlerErrors(request).isEmpty() &&
            (this.getErrors(request) == null || this.getErrors(request).isEmpty());
    }

    /**
     * <p>
     *  Retrieves the exception handler messages (if any).  Creates a new
     *  ActionMessages instance and returns that if one doesn't already exist.
     * </p>
     */
    private org.apache.struts.action.ActionMessages getExceptionHandlerErrors(HttpServletRequest request)
    {
        org.apache.struts.action.ActionMessages errors =
            (org.apache.struts.action.ActionMessages)request.getAttribute(
                "org.andromda.bpm4struts.errormessages");
        if (errors == null)
        {
            errors = new org.apache.struts.action.ActionMessages();
            request.setAttribute("org.andromda.bpm4struts.errormessages", errors);
        }
        return errors;
    }
}

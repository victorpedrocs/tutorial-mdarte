// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by: Util.vsl in andromda-java-cartridge-coppetec.
//
package br.mdarte.exemplo.academico.util;

import java.util.Locale;
import java.util.ResourceBundle;

import javax.servlet.http.HttpServletRequest;

import org.apache.struts.Globals;
import org.apache.struts.util.MessageResources;

import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.Collection;

public abstract class UtilAbstract {

	public static String getResourceBundleString(String key,Locale locale, ClassLoader loader)
	{
		ResourceBundle rb = ResourceBundle.getBundle("application-resources",locale,loader);
	
		if (rb != null)
			return rb.getString(key);
	
		return null;
	}

	public static String getMessage(String key, HttpServletRequest request) {
		MessageResources resource = (MessageResources) request
				.getAttribute(Globals.MESSAGES_KEY);
		Locale locale = (Locale) request.getSession().getAttribute(
				Globals.LOCALE_KEY);
		return getMessage(key, resource, locale);
	}

	public static String getMessage(String key, MessageResources resource,
			Locale locale) {
		String msg = key;
		if (resource.isPresent(locale, key))
			msg = resource.getMessage(locale, key);
		return msg;
	}
	
	public static String md5(String senha) throws NoSuchAlgorithmException {		
		MessageDigest md = MessageDigest.getInstance("MD5");
		md.update(senha.getBytes());
		return stringHexa(md.digest());
	}
	
	private static String stringHexa(byte[] bytes) {
		StringBuilder s = new StringBuilder();
		for (int i = 0; i < bytes.length; i++) {
			int parteAlta = ((bytes[i] >> 4) & 0xf) << 4;
			int parteBaixa = bytes[i] & 0xf;
			if (parteAlta == 0) s.append('0');
			s.append(Integer.toHexString(parteAlta | parteBaixa));
		}
		
		return s.toString();
	}
	
	public static Boolean checkEmpty(String string)	{
		if(string == null || string.trim().isEmpty())
			return true;
		
		return false;
	}
	
	public static Boolean checkEmpty(Collection collection)	{
		if( collection == null ||  collection.isEmpty())
			return true;
		
		return false;
	}
	
	public static java.util.ArrayList paginateList(java.util.ArrayList res, Integer paginaAtual, Integer linhas) {
	
		java.util.ArrayList result = new java.util.ArrayList();
		
		for (int i = linhas*paginaAtual; i < linhas*paginaAtual + linhas; i++) {
			if (i >= res.size()) break;
			result.add(res.get(i));
		}
			
		return result;
	
	}
}
